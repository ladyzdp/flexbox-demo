@charset "utf-8";
body {
    background-color: #333;
}

.flex-box {
    box-sizing: border-box;
    width: 100px;
    height: 100px;
    margin: 20px;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    float: left;
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 10px;
    box-shadow: inset 0 5px 0 0 #ccc, inset 0 -5px 0 0 #aaa, inset 5px 0 0 0 #ddd, inset -5px 0 0 0 #ddd;
    //flex-direction属性决定主轴的方向（即项目的排列方向）
    //flex-direction: row | row-reverse | column | column-reverse;
    // flex-direction: column; 
    &.flex-direction-col {
        flex-direction: column;
    }

    //flex-wrap属性定义，如果一条轴线排不下，如何换行
    //flex-wrap: nowrap | wrap | wrap-reverse;
    // flex-wrap: wrap;
    &.flex-wrap-wrap{
        flex-wrap:wrap;
    }
    &.flex-wrap-wrap-r{
        flex-wrap:wrap-reverse;
    }
    //flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap
    //flex-flow: <flex-direction> || <flex-wrap>;
    // flex-flow: column nowrap;
    //justify-content属性定义了项目在主轴上的对齐方式。
    //justify-content: flex-start | flex-end | center | space-between | space-around;
    // justify-content: center;
    &.justify-content-ct {
        justify-content: center;
    }
    &.justify-content-end {
        justify-content: flex-end;
    }
    &.justify-content-sb {
        justify-content: space-between;
    }
    &.justify-content-sa {
        justify-content: space-around;
    }
    //align-items属性定义项目在交叉轴上如何对齐。
    //align-items: flex-start | flex-end | center | baseline | stretch;
    // align-items: center;
    &.align-items-ct {
        align-items: center;
    }
    &.align-items-end {
        align-items: flex-end;
    }
    &.align-items-str {
        align-items: stretch;
    }
    //align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
    //align-content: flex-start | flex-end | center | space-between | space-around | stretch;
    // align-content: center;
    &.align-content-sb{
        align-content:space-between;
    }
    &.align-content-end{
        align-content:flex-end;
    }
}

.flex-items {
    background-color: #333;
    color: #2eb7ed;
    line-height: 100%;
    width: 25px;
    height: 25px;
    border-radius: 100%;
    // margin: 0 2px;
    box-shadow: inset 0 -2px 0 #999;
    &.align-self-ct {
        align-self: center;
    }
    &.align-self-end {
        align-self: flex-end;
    }
}
.column{
    display: flex;
    flex-basis:100%;
    justify-content:space-between;
}
.order {
    //order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。
    //order: <integer>;
    order: 10;
}

.flex-grow {
    //flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
    //flex-grow:<number>;
    flex-grow: 4;
}

.flex-shrink {
    //flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
    //flex-shrink: <number>;
    flex-shrink: 2;
}

.flex-basis {
    //flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。
    //浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
    //flex-basis: <length> | auto;
    flex-basis: 2;
}

.flex {
    //flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
    //flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
    flex: 0 1 auto;
}

.align-self-ct {
    //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。
    //默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
    // align-self: auto | flex-start | flex-end | center | baseline | stretch;
    align-self: center;
}
